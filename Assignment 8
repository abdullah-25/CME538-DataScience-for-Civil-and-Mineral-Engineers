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\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n",
    "\n",
    "sns.scatterplot(data=train, x='pickup_lon', y='pickup_lat', hue='region',\n",
    "                s=1, alpha=0.2, label='Train Regions', ax=ax1)\n",
    "ax1.set_xlim([-74.02, -73.92])\n",
    "ax1.set_ylim([40.7, 40.875])\n",
    "ax1.set_xlabel('Longitude')\n",
    "ax1.set_ylabel('Latitude')\n",
    "ax1.legend()\n",
    "\n",
    "sns.scatterplot(data=val, x='pickup_lon', y='pickup_lat', hue='region',\n",
    "                s=1, alpha=0.2, label='Val Regions', ax=ax2)\n",
    "ax2.set_xlim([-74.02, -73.92])\n",
    "ax2.set_ylim([40.7, 40.875])\n",
    "ax1.set_xlabel('Longitude')\n",
    "ax1.set_ylabel('Latitude')\n",
    "ax2.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Pay attention to this important step in the workflow. You'll notice that `pc1` and the `region` bin limits where computed exclusively from the training dataset and then applied to the validation and test datasets. This is important for ensure no data leakage occurs. `#data-leakage`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Question 3d\n",
    "Use `sns.distplot` to create an overlaid histogram comparing the distribution of speeds for morning taxi rides (12am-6am) in the three different regions defined above using `train`. Ponder if there is an association between region and average speed during the night."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "models = ['constant', 'simple', 'linear', 'period', 'speed']\n",
    "pd.DataFrame.from_dict({\n",
    "    'Model': models,\n",
    "    'Val RMSE': [eval(m + '_rmse') for m in models]\n",
    "}).set_index('Model').plot(kind='barh');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Based on the results presented above, we select the `speed` model, which has the lowest RMSE on the validation dataset.\n",
    "\n",
    "## Question 4f\n",
    "The last step is to unlock out test dataset and compute the RMSE for the `speed` model as our final evaluation of the model's generalization error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Speed multiple linear regression model test RMSE: 262.29264035984505 seconds\n"
     ]
    }
   ],
   "source": [
    "# Write your code here\n",
    "\n",
    "linear_model = LinearRegression(fit_intercept= True).fit(create_features(train), train[['speed']])\n",
    "y_fitted_speed_test = linear_model.predict(create_features(test))\n",
    "Error = test['distance'] / y_fitted_speed_test.squeeze() * 3600 - test['duration']\n",
    "speed_rmse_test =rmse(Error)\n",
    "\n",
    "# Print score\n",
    "print('Speed multiple linear regression model test RMSE: {} seconds'.format(speed_rmse_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "**Congratulation, you're done Assignment 7. Review your answers and clean up that code before submitting on Quercus. `#cleancode`**"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
